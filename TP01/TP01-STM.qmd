---
title: "TP01-STM"
author: "Chhaythean LY"
group: "Group 5"
format: html
editor: visual
---

### Task 1: Galton Inheredity

```{r}

# ==============================>
# Task 1: Galton Inheredity
# ==============================>

# (a). Reconstruct the contingency table between the height of 928 adults children and the average height of their 205 set of parents.

library(HistData)
data(Galton)

Galton <- data.frame(Galton)

```

```{r}

contigency_table <- table(Galton$parent, Galton$child)
dim(contigency_table)

print(contigency_table)
```

```{r}

# (b). Recontruct the scatter plot and regression line between the height of children and average height of parents
library(ggplot2)

ggplot(Galton, aes(x = parent, y = child)) +
  geom_point(alpha = 1, size = 2) +
  geom_smooth(method = "lm", se = FALSE, color = "red", linewidth = 0.5) +
  labs(
    title = "Scatter Plot and Regression Line",
    x = "Mid-Parent Height (inches)", 
    y = "Child Height (inches)" 
  ) +
  theme_minimal()
```

### Task 2: Munich Rent Index of 1999

```{r}

# ---------------->
# Package 
# ---------------->
library(gamlss.data)
library(ggplot2)
library(gridExtra)
library(dplyr)

glimpse(rent99)
```

```{r}


# =============================================================================>
# (a). Reconstruct the histograms and kernel density estimates below
# =============================================================================>

data(rent99)
rent99 <- as.data.frame(rent99)

# Rent for sqm ----------------->

rent99$rentsqm <- rent99$rent / rent99$area

# Define the variables to plot --------------->
vars <- c("rent", "rentsqm", "area", "yearc")

# Create a reusable function ----------------->

hist <- function(data, var) {
  
    if (var == "yearc") {
    x_label <- "year of construction"
  } else if (var == "area") {
    x_label <- "area in sqm"
  } else if (var == "rentsqm") {
    x_label <- "net rent per sqm in Euro"
  } else {  # var == "rent"
    x_label <- "net rent in Euro"
  }
  
  ggplot(data, aes(x = .data[[var]])) +
    geom_histogram(aes(y = ..density..), bins = 30, color = "black", fill = "lightgray") +
    geom_density(color = "red", linewidth = 0.5) +
    labs(
      title = paste("Hist. and Kernel Density:", var),
      x = x_label,
      y = "Estimate Density"
    ) +
    theme_minimal()
}

# Create plots --------------->
p1 <- hist(rent99, "rent")
p2 <- hist(rent99, "rentsqm")
p3 <- hist(rent99, "area")
p4 <- hist(rent99, "yearc")

# Display all ---------------->
library(gridExtra)
grid.arrange(p1, p2, p3, p4, ncol = 2)
```

```{r}

# =============================================================================>
# (b). Reconstruct the scatter plots below.
# =============================================================================>

# A resuable function of scatterplot Rent99 ----------->

scatterplot <- function(data, var_x, var_y){
  if (var_x == "area"){
    x_label = "area in sqm"
  }else if (var_x == "yearc"){
    x_label = "year of construction"
  }else if (var_x == "rentsqm"){
    x_label = "area in sqm"
  }
  
  ggplot(data, aes(x = .data[[var_x]], y = .data[[var_y]]))+
    geom_point(alpha = 0.6, size = 1) +
    labs(
    title = "Net rent per sqm vs. area",
    x = x_label,
    y = "Net rent per sqm (Euro)"
    ) +
    theme_minimal()
}

scatter1 <- scatterplot(rent99, "area", "rent")
scatter2 <- scatterplot(rent99, "area", "rentsqm")
scatter3 <- scatterplot(rent99, "yearc", "rent")
scatter4 <- scatterplot(rent99, "yearc", "rentsqm")

grid.arrange(scatter1, scatter2, scatter3, scatter4, ncol = 2, nrow =2)
```

```{r}

# ==============================================================================>
# Cluster scatter plot below
# (c). Recontruct Average net rent (left) and net rent per sqm (right) plus/minus one 
# standard deviation versus area and year of construction
# ==============================================================================>


# Define function ---------------->
cluster_scatter <- function(data, x, y, title) {
  main <- data %>%
    group_by(.data[[x]]) %>%
    summarise(
      y_mean = mean(.data[[y]], na.rm = TRUE),
      y_sd   = sd(.data[[y]], na.rm = TRUE),
      .groups = "drop"
    ) %>%
    mutate(
      ymin = y_mean - y_sd,
      ymax = y_mean + y_sd
    )
  
  ggplot(main, aes(x = .data[[x]], y = y_mean)) +
    geom_point(size = 1.5) +
    geom_errorbar(aes(ymin = ymin, ymax = ymax), width = 0.5) +
    labs(
      title = title,
      x = x,
      y = paste("Average", y)
    ) +
    theme_minimal() +
    theme(plot.title = element_text(hjust = 0.5))
}

p1 <- cluster_scatter(rent99, "area", "rent", "Average net rent vs. area")
p2 <- cluster_scatter(rent99, "area", "rentsqm", "Average net rent per sqm vs. area")
p3 <- cluster_scatter(rent99, "yearc", "rent", "Average net rent vs. year of construction")
p4 <- cluster_scatter(rent99, "yearc", "rentsqm", "Average net rent per sqm vs. year of const.")

grid.arrange(p1, p2, p3, p4, ncol = 2)
```

```{r}

# ===================================================================================>
# (d). Reconstruct the box plots and smooth density estimators below.
# ===================================================================================>

rent99 <- rent99 %>%
  mutate(
    location_label = case_when(
      location == 1 ~ "average",
      location == 2 ~ "good",
      location == 3 ~ "top"
    )
  )

# ------------------> Panel 1: Boxplot of rentsqm by location
box_plot <- ggplot(rent99, aes(x = factor(location), y = rentsqm)) +
  geom_boxplot(fill = "lightgray", color = "black") +
  labs(
    title = "Boxplots of net rent per sqm by location",
    x = "location",
    y = "net rent per sqm"
  ) +
  theme_minimal()

# ------------------> Panel 2: Density curves by location
density <- ggplot(rent99, aes(x = rentsqm, color = location_label)) +
  geom_density(linewidth = 1, show.legend = TRUE) +
  scale_color_manual(
    name = "",
    values = c("average" = "black", "good" = "blue", "top" = "red"),
    guide = guide_legend(override.aes = list(linetype = c(1, 2, 3)))
  ) +
  labs(
    title = "Density of net rent per sqm by location",
    x = "net rent per sqm",
    y = "estimated density"
  ) +
  theme_minimal() +
  theme(legend.position = c(0.9, 0.9))

grid.arrange(box_plot, density, ncol = 2, widths = c(1, 1.5))
```

### Task 3: Fuel Consumption

```{r}
# Packages ---------------------------------->
library(alr4)
data(fuel2001)
fuel2001<-data.frame(fuel2001)

print(fuel2001)
```

```{r}
# ============================================================================>
# (a). Create 3 more following variables and add to the fuel data consumption.
# • Fuel: 1000×FuelC/Pop
# • Dlic: 1000×Drivers/Pop
# • log(Miles): natural logarithm of Miles
# ============================================================================>

fuel2001$Fuel <- 1000 * fuel2001$FuelC / fuel2001$Pop
fuel2001$Dlic <- 1000 * fuel2001$Drivers / fuel2001$Pop
fuel2001$log <- log(fuel2001$Miles)

summary(fuel2001$Fuel)
summary(fuel2001$Dlic)
summary(fuel2001$logMiles)
```

plots

```{r}
# ======= Packages ===========>

library(corrplot)
library(ggplot2)
library(GGally)
# Define a new columb ====================================================>

fuel2001 <- fuel2001 %>%
  mutate(
    Fuel = 1000 * FuelC / Pop,      # Fuel consumption per capita
    Dlic = 1000 * Drivers / Pop,    # Licensed drivers per 1000 population
    log_Miles = log(Miles)          # Natural logarithm of Miles
  )

# ===================================================================================> 
# (b). Define response variable Based on the task goal, Fuel (fuel consumption per  capital is the response variable
# ===================================================================================>
response_var <- "Fuel"

# ===================================================================>
# Study overview of each variable - Descriptive statistics
# ===================================================================>

cat("Descriptive Statistics:\n")
print(summary(fuel2001))

# Function to create univariate plots
create_univariate_plots <- function(data) {
  # Select numeric variables for univariate analysis
  numeric_vars <- c("Fuel", "Dlic", "Income", "log_Miles", "Pop", "Tax")
  
  # Create histograms for each variable
  plots <- list()
  for (var in numeric_vars) {
    plots[[var]] <- ggplot(data, aes(x = .data[[var]])) +
      geom_histogram(bins = 15, fill = "skyblue", color = "black", alpha = 0.7) +
      labs(title = paste("Distribution of", var),
           x = var, y = "Frequency") +
      theme_minimal()
  }
  for (plot in plots) {
    print(plot)
  }
}

# Create univariate plots
cat("\nCreating Univariate Plots...\n")
create_univariate_plots(fuel2001)

# Correlation plots across variables
cat("\nCorrelation Analysis:\n")

# Select variables for correlation analysis
cor_vars <- fuel2001 %>% 
  select(Fuel, Dlic, Income, log_Miles, Pop, Tax)

# Calculate correlation matrix
cor_matrix <- cor(cor_vars)
print(round(cor_matrix, 3))

# Create correlation plot
corrplot(cor_matrix, method = "color", type = "upper", 
         order = "hclust", tl.col = "black", tl.srt = 45,
         title = "Correlation Plot of Fuel Consumption Variables",
         mar = c(0, 0, 1, 0))

# Alternative correlation plot using ggpairs
cat("\nCreating Detailed Correlation Plot...\n")
ggpairs(cor_vars) +
  labs(title = "Pairwise Relationships - Fuel Consumption Data") +
  theme_minimal()

## Visualize relationship between response and predictor variables
cat("\nCreating Response-Predictor Relationship Plots...\n")

# Create scatter plots of Fuel vs each predictor
predictors <- c("Dlic", "Income", "log_Miles", "Tax")

response_predictor_plots <- list()
for (predictor in predictors) {
  response_predictor_plots[[predictor]] <- ggplot(fuel2001, aes(x = .data[[predictor]], y = Fuel)) +
    geom_point(size = 2, alpha = 0.7, color = "steelblue") +
    geom_smooth(method = "lm", se = TRUE, color = "red", linetype = "solid") +
    labs(title = paste("Fuel Consumption vs", predictor),
         x = predictor, y = "Fuel Consumption per Capita") +
    theme_minimal()
}

# Print all response-predictor plots
for (plot in response_predictor_plots) {
  print(plot)
}

# Additional detailed analysis
cat("\n=== ADDITIONAL INSIGHTS ===\n")

# State with highest and lowest fuel consumption
max_fuel_state <- fuel2001[which.max(fuel2001$Fuel), "row.names"]
min_fuel_state <- fuel2001[which.min(fuel2001$Fuel), "row.names"]

cat("State with highest fuel consumption per capita:", max_fuel_state, "\n")
cat("State with lowest fuel consumption per capita:", min_fuel_state, "\n")

# Basic linear model to see initial relationships
cat("\nInitial Linear Model Summary:\n")
initial_model <- lm(Fuel ~ Dlic + Income + log_Miles + Tax, data = fuel2001)
print(summary(initial_model))

# Create a comprehensive summary table
cat("\nComprehensive Summary Table:\n")
summary_table <- fuel2001 %>%
  select(Fuel, Dlic, Income, log_Miles, Tax) %>%
  summarise(across(everything(), 
                   list(Mean = mean, SD = sd, Min = min, Max = max),
                   .names = "{.col}_{.fn}")) %>%
  round(3)

print(summary_table)
```

### Section 2: The nassCDS data

Problem: In this section of the exam, we focus on the nassCDS data which is a US data from police-reported car crashes (1997-2002) in which there is a harmful event (people or property). Data are restricted to front-seat occupants, include only a subset of the variables recorded. More information about the dataset can be found using the following link: https://www.rdocumentation.org/packages/DAAG/versions/1.22/topics/nassCDS. The data is a part of the DAAG R package. To get an access to the data you first need to install the package.

#### Question 1:

```{r}

# ================================================>
# (1). How many individuals used seatbelt?
# ================================================>
library("DAAG")
data(nassCDS)
names(nassCDS)
head(nassCDS)
str(nassCDS)

```

```{r}

belt <- sum(nassCDS$seatbelt == "belted" , na.rm = TRUE)
cat("There are", {belt}, "individuals used seatbelt")

```

```{r}
# =================================================================================
# What is the distribution of seatbelt usage across the accident’s outcome factor ? Produce a 2X2 table that shows the number of seatbelt users (belted/none) and accident’s outcome (alive/dead)?
# =================================================================================

tbl <- table(nassCDS$seatbelt, nassCDS$dead)
tbl
```

(3). Write a function that can be used to conduct inference for proportions in two independent populations. The null hypothesis is that there is no difference between the proportions in the two populations. Test the null hypothesis against a two sided alternative. The input of the function should be the 2X2 table in the previous item (Question 1.2) and the output should be the test statistic and the p value. Apply your function to test the null hypothesis that the proportion of deaths among individuals who used seatbelt is equal to the proportion of deaths among the individuals who did not use seatbelt.

```{r}
# Create a 2x2 table
contingency_table <- table(nassCDS$seatbelt, nassCDS$dead)
print("2x2 Contingency Table:")
print(contingency_table)

# More readable format
cat("\nSeatbelt Usage vs Accident Outcome:\n")
cat("           Alive   Dead\n")
cat("belted    ", contingency_table["belted", "alive"], "    ", contingency_table["belted", "dead"], "\n")
cat("none      ", contingency_table["none", "alive"], "    ", contingency_table["none", "dead"], "\n")
```

```{r}

# H_{0} : p_{1} = p_{2} vs H_{a} : p_{1} != p_{2}
# Function for two proportion z-test
two_prop_test <- function(contingency_table) {
  # Extract values from contingency table
  n1 <- sum(contingency_table["belted", ])  # total belt users
  n2 <- sum(contingency_table["none", ])    # total non-users
  x1 <- contingency_table["belted", "dead"] # deaths among belt users
  x2 <- contingency_table["none", "dead"]   # deaths among non-users
  
  # Calculate proportions
  p1 <- x1 / n1
  p2 <- x2 / n2
  p_pool <- (x1 + x2) / (n1 + n2)
  
  # Calculate test statistic
  z_stat <- (p1 - p2) / sqrt(p_pool * (1 - p_pool) * (1/n1 + 1/n2))
  
  # Calculate two-sided p-value
  p_value <- 2 * (1 - pnorm(abs(z_stat)))
  
  # Return results
  return(list(test_statistic = z_stat, p_value = p_value))
}

# Apply the function to our data
test_results <- two_prop_test(contingency_table)
cat("\nTwo Proportion Z-Test Results:\n")
cat("Test Statistic:", test_results$test_statistic, "\n")
cat("P-value:", test_results$p_value, "\n")

# Interpretation
if (test_results$p_value < 0.05) {
  cat("Conclusion: Reject the null hypothesis - there is a significant difference in death proportions.\n")
} else {
  cat("Conclusion: Fail to reject the null hypothesis - no significant difference in death proportions.\n")
}
```

```{r}


# Create a barplot
par(mfrow = c(1, 2))  # Set up side-by-side plots

# Barplot 1: Counts by seatbelt usage and outcome
barplot(contingency_table, 
        main = "Seatbelt Usage by Accident Outcome",
        xlab = "Accident Outcome", 
        ylab = "Count",
        col = c("lightblue", "lightcoral"),
        legend = rownames(contingency_table),
        beside = TRUE)

# Barplot 2: Proportions (more informative)
prop_table <- prop.table(contingency_table, margin = 1) * 100

barplot(prop_table, 
        main = "Death Rate by Seatbelt Usage (%)",
        xlab = "Seatbelt Usage", 
        ylab = "Percentage",
        col = c("lightgreen", "salmon"),
        legend = colnames(prop_table),
        ylim = c(0, 100))

# Reset plot parameters
par(mfrow = c(1, 1))

# Alternative visualization using ggplot2 (if preferred)
if (require(ggplot2)) {
  library(ggplot2)
  
  # Create a more polished plot
  ggplot(as.data.frame(contingency_table), 
         aes(x = Var1, y = Freq, fill = Var2)) +
    geom_bar(stat = "identity", position = "dodge") +
    labs(title = "Seatbelt Usage Distribution by Accident Outcome",
         x = "Seatbelt Usage",
         y = "Count",
         fill = "Outcome") +
    theme_minimal()
}
```

#### Question 2:

1.  Mean and Standard Deviation of age by accident

    ```{r}
    # Calculate mean and standard deviation by group
    age_stats <- aggregate(ageOFocc ~ dead, data = nassCDS, 
                          FUN = function(x) c(mean = mean(x), sd = sd(x)))

    # Display the results
    cat("Mean and Standard Deviation of Age by Accident Outcome:\n")
    for(i in 1:nrow(age_stats)) {
      outcome <- age_stats$dead[i]
      mean_age <- age_stats$ageOFocc[i, "mean"]
      sd_age <- age_stats$ageOFocc[i, "sd"]
      cat(outcome, ": Mean =", round(mean_age, 2), 
          ", SD =", round(sd_age, 2), "\n")
    }

    # Alternative approach using tapply
    cat("\nAlternative calculation using tapply:\n")
    mean_age_by_outcome <- tapply(nassCDS$ageOFocc, nassCDS$dead, mean)
    sd_age_by_outcome <- tapply(nassCDS$ageOFocc, nassCDS$dead, sd)

    cat("Alive - Mean:", round(mean_age_by_outcome["alive"], 2), 
        "SD:", round(sd_age_by_outcome["alive"], 2), "\n")
    cat("Dead - Mean:", round(mean_age_by_outcome["dead"], 2), 
        "SD:", round(sd_age_by_outcome["dead"], 2), "\n")
    ```

2.  Box plot and Data point

    ```{r}
    # Create boxplot with data points
    par(mfrow = c(1, 1))
    # Basic boxplot
    boxplot(ageOFocc ~ dead, data = nassCDS,
            main = "Distribution of Occupant Age by Accident Outcome",
            xlab = "Accident Outcome",
            ylab = "Age of Occupant",
            col = c("lightgreen", "lightcoral"),
            ylim = c(0, 100))
    stripchart(ageOFocc ~ dead, data = nassCDS,
               method = "jitter",
               jitter = 0.2,
               pch = 16,
               col = adjustcolor("blue", alpha.f = 0.3),
               vertical = TRUE,
               add = TRUE)

    # Add mean points
    means <- tapply(nassCDS$ageOFocc, nassCDS$dead, mean)
    points(1:2, means, pch = 18, col = "red", cex = 2)
    text(1:2, means, labels = paste("Mean:", round(means, 1)), 
         pos = 3, col = "red")
    ```

3.  Calculate 95% confidence interval for mean difference

    ```{r}
    t_test_result <- t.test(ageOFocc ~ dead, data = nassCDS, conf.level = 0.95)

    cat("Two-Sample t-Test Results:\n")
    print(t_test_result)

    ci_lower <- t_test_result$conf.int[1]
    ci_upper <- t_test_result$conf.int[2]
    mean_diff <- t_test_result$estimate[1] - t_test_result$estimate[2]

    cat("\n95% Confidence Interval for Mean Age Difference (Alive - Dead):\n")
    cat("Mean difference:", round(mean_diff, 4), "\n")
    cat("95% CI: [", round(ci_lower, 4), ", ", round(ci_upper, 4), "]\n")
    ```

#### Question 3:

1.  Visualize the distribution of the occupant age by sex.

    ```{r}

    plot1 <- ggplot(nassCDS, aes(x = ageOFocc, fill = sex)) +
      geom_density(alpha = 0.6) +
      labs(title = "Distribution of Occupant Age by Sex",
           x = "Age of Occupant",
           y = "Density",
           fill = "Sex") +
      theme_minimal()

    plot2 <- ggplot(nassCDS, aes(x = ageOFocc, fill = sex)) +
      geom_histogram(alpha = 0.6, position = "identity", bins = 30) +
      labs(title = "Distribution of Occupant Age by Sex",
           x = "Age of Occupant",
           y = "Count",
           fill = "Sex") +
      theme_minimal()

    grid.arrange(plot1, plot2, ncol = 2)
    ```

2.  How many occupants over the age of 50 years old survived the accident?

    ```{r}

    survived_over_50 <- sum(nassCDS$ageOFocc > 50 & nassCDS$dead == 0, na.rm = TRUE)
    cat("Occupants over 50 who survived:", survived_over_50, "\n\n")
    ```

3.  Add a binary variable AgeOFocc_class that takes the value of 1 when the occupant age is over 50 years and 0 for when the occupant age is 50 years or less.

    ```{r}
    nassCDS$AgeOFocc_class <- ifelse(nassCDS$ageOFocc > 50, 1, 0)
    cat("AgeOFocc_class variable added successfully\n")
    cat("Distribution: 0 =", sum(nassCDS$AgeOFocc_class == 0), ", 1 =", sum(nassCDS$AgeOFocc_class == 1), "\n\n")
    ```

4.  Create a data frame, nassCDS_o50, containing occupants older than 50 years old. This data frame should contain the variables dead, airbag, weight, and injSeverity. Remove the observations with missing values

5.  Find the dimension of the data

    ```{r}

    nassCDS_o50 <- nassCDS[nassCDS$ageOFocc > 50, c("dead", "airbag", "weight", "injSeverity")]
    nassCDS_o50 <- na.omit(nassCDS_o50)
    cat("4: nassCDS_o50 data frame created\n")
    cat("5: Dimensions of new data:", dim(nassCDS_o50), "\n")
    ```
